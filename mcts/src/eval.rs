
use std::path::Path;

use std::error::Error;
use std::result::Result;

use serde::Serialize;
use serde::Serializer;
use serde::Deserialize;
use serde::Deserializer;

use bitboard::*;

pub type EvalInput  = Board;
pub type EvalPrior = [f32;64];
pub type EvalScore = f32;

#[derive(Clone)]
pub struct EvalOutput(pub EvalPrior, pub EvalScore);
impl EvalOutput {
    pub fn new() -> EvalOutput {
        EvalOutput([0.0;64],0.0)
    }

    pub fn permute(&mut self, perm : usize) {
        permutations::permute_array(&mut self.0, perm);
    }

    pub fn unpermute(&mut self, perm : usize) {
        permutations::unpermute_array(&mut self.0, perm);
    }
}

impl Serialize for EvalOutput {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        where S: Serializer
    {
        let mut split1 = [0.0;32];
        let mut split2 = [0.0;32];

        for i in 0..32 {
            split1[i] = self.0[i];
            split2[i] = self.0[i+32];
        }

        let tmp = ((split1, split2), self.1);

        tmp.serialize(serializer)
    }
}

impl<'de> Deserialize<'de> for EvalOutput {
    fn deserialize<D>(deserializer: D) -> Result<EvalOutput, D::Error>
        where D: Deserializer<'de>
    {
        let mut tmp = <(([f32;32],[f32;32]),f32)>::deserialize(deserializer)?;

        let mut ret = EvalOutput([0.0;64],0.0);
        ret.0[..32].swap_with_slice(&mut (tmp.0).0);
        ret.0[32..].swap_with_slice(&mut (tmp.0).1);
        ret.1 = tmp.1;

        Ok(ret)
    }
}

impl Into<([f32;64],f32)> for EvalOutput {
    fn into(self) -> ([f32;64],f32) {
        (self.0, self.1)
    }
}

impl From<([f32;64],f32)> for EvalOutput {
    fn from(f : ([f32;64],f32)) -> EvalOutput {
        EvalOutput(f.0, f.1)
    }
}

mod permutations {

    // const perms : [[usize; 64]; 8] = [
    //     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63],
    //     [7, 15, 23, 31, 39, 47, 55, 63, 6, 14, 22, 30, 38, 46, 54, 62, 5, 13, 21, 29, 37, 45, 53, 61, 4, 12, 20, 28, 36, 44, 52, 60, 3, 11, 19, 27, 35, 43, 51, 59, 2, 10, 18, 26, 34, 42, 50, 58, 1, 9, 17, 25, 33, 41, 49, 57, 0, 8, 16, 24, 32, 40, 48, 56],
    //     [63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0],
    //     [56, 48, 40, 32, 24, 16, 8, 0, 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 28, 20, 12, 4, 61, 53, 45, 37, 29, 21, 13, 5, 62, 54, 46, 38, 30, 22, 14, 6, 63, 55, 47, 39, 31, 23, 15, 7],
    //     [63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 60, 52, 44, 36, 28, 20, 12, 4, 59, 51, 43, 35, 27, 19, 11, 3, 58, 50, 42, 34, 26, 18, 10, 2, 57, 49, 41, 33, 25, 17, 9, 1, 56, 48, 40, 32, 24, 16, 8, 0],
    //     [7, 6, 5, 4, 3, 2, 1, 0, 15, 14, 13, 12, 11, 10, 9, 8, 23, 22, 21, 20, 19, 18, 17, 16, 31, 30, 29, 28, 27, 26, 25, 24, 39, 38, 37, 36, 35, 34, 33, 32, 47, 46, 45, 44, 43, 42, 41, 40, 55, 54, 53, 52, 51, 50, 49, 48, 63, 62, 61, 60, 59, 58, 57, 56],
    //     [0, 8, 16, 24, 32, 40, 48, 56, 1, 9, 17, 25, 33, 41, 49, 57, 2, 10, 18, 26, 34, 42, 50, 58, 3, 11, 19, 27, 35, 43, 51, 59, 4, 12, 20, 28, 36, 44, 52, 60, 5, 13, 21, 29, 37, 45, 53, 61, 6, 14, 22, 30, 38, 46, 54, 62, 7, 15, 23, 31, 39, 47, 55, 63],
    //     [56, 57, 58, 59, 60, 61, 62, 63, 48, 49, 50, 51, 52, 53, 54, 55, 40, 41, 42, 43, 44, 45, 46, 47, 32, 33, 34, 35, 36, 37, 38, 39, 24, 25, 26, 27, 28, 29, 30, 31, 16, 17, 18, 19, 20, 21, 22, 23, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7]
    // ];

    // matches the permutations in bitboard::bit_ops::all_board_syms
    const PERMS : [[usize; 64]; 8] = [
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63],
        [7, 6, 5, 4, 3, 2, 1, 0, 15, 14, 13, 12, 11, 10, 9, 8, 23, 22, 21, 20, 19, 18, 17, 16, 31, 30, 29, 28, 27, 26, 25, 24, 39, 38, 37, 36, 35, 34, 33, 32, 47, 46, 45, 44, 43, 42, 41, 40, 55, 54, 53, 52, 51, 50, 49, 48, 63, 62, 61, 60, 59, 58, 57, 56],
        [56, 57, 58, 59, 60, 61, 62, 63, 48, 49, 50, 51, 52, 53, 54, 55, 40, 41, 42, 43, 44, 45, 46, 47, 32, 33, 34, 35, 36, 37, 38, 39, 24, 25, 26, 27, 28, 29, 30, 31, 16, 17, 18, 19, 20, 21, 22, 23, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7],
        [63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0],
        [0, 8, 16, 24, 32, 40, 48, 56, 1, 9, 17, 25, 33, 41, 49, 57, 2, 10, 18, 26, 34, 42, 50, 58, 3, 11, 19, 27, 35, 43, 51, 59, 4, 12, 20, 28, 36, 44, 52, 60, 5, 13, 21, 29, 37, 45, 53, 61, 6, 14, 22, 30, 38, 46, 54, 62, 7, 15, 23, 31, 39, 47, 55, 63],
        [56, 48, 40, 32, 24, 16, 8, 0, 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 28, 20, 12, 4, 61, 53, 45, 37, 29, 21, 13, 5, 62, 54, 46, 38, 30, 22, 14, 6, 63, 55, 47, 39, 31, 23, 15, 7],
        [7, 15, 23, 31, 39, 47, 55, 63, 6, 14, 22, 30, 38, 46, 54, 62, 5, 13, 21, 29, 37, 45, 53, 61, 4, 12, 20, 28, 36, 44, 52, 60, 3, 11, 19, 27, 35, 43, 51, 59, 2, 10, 18, 26, 34, 42, 50, 58, 1, 9, 17, 25, 33, 41, 49, 57, 0, 8, 16, 24, 32, 40, 48, 56],
        [63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 60, 52, 44, 36, 28, 20, 12, 4, 59, 51, 43, 35, 27, 19, 11, 3, 58, 50, 42, 34, 26, 18, 10, 2, 57, 49, 41, 33, 25, 17, 9, 1, 56, 48, 40, 32, 24, 16, 8, 0]
    ];

    pub fn permute_array(arr : &mut [f32; 64], perm : usize){
        assert!(0 <= perm);
        assert!(perm <= 7);


        let mut new = [0.0; 64];
        for i in 0..64 {
            new[PERMS[perm][i]] = arr[i];
        }

        for i in 0..64 {
            arr[i] = new[i];
        }
    }

    pub fn unpermute_array(arr : &mut [f32; 64], perm : usize){
        assert!(0 <= perm);
        assert!(perm <= 7);


        let mut new = [0.0; 64];
        for i in 0..64 {
            new[i] = arr[PERMS[perm][i]];
        }

        for i in 0..64 {
            arr[i] = new[i];
        }
    }
}


pub trait Evaluator: Sized {
    fn evaluate(&mut self, input : &EvalInput) -> EvalOutput;
    fn evaluate_batch(&mut self, input : &[EvalInput]) -> Vec<EvalOutput>;
    fn train(&mut self, input : &[EvalInput], target : &[EvalOutput], eta : f32) -> f32;
    fn save(&mut self, filename : &Path) -> Result<(), Box<Error>>;
    fn load(&mut self, filename : &Path) -> Result<(), Box<Error>>;
}

